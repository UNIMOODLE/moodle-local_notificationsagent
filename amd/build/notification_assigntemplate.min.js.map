{"version":3,"file":"notification_assigntemplate.min.js","sources":["../src/notification_assigntemplate.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n *\n * @module   local_notificationsagent/assigntemplate\n * @copyright 2023, ISYC\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString} from 'core/str';\nimport Url from 'core/url';\nimport $ from 'jquery';\n/**\n * Selectors for the Assign Modal.\n *\n * @property {string} selectAllId The element ID of the Select All link.\n*/\nconst selectors = {\n    selectAllId: '[id^=\"select-all-\"]',\n};\n\n/**\n * Get the count of selected items for all categories.\n *\n * @returns {void}\n */\nconst getCountAll = async() => {\n    const categories = document.querySelectorAll('#category-listing-content-0 > li[id^=\"listitem-category-\"]');\n    Array.from(categories).map((category) => {\n        getCountBy(category.id.replace('listitem-category-', ''));\n    });\n};\n\n/**\n * Count selected items in a category.\n *\n * @param {integer} categoryId\n *\n * @returns {void}\n */\nconst getCountBy = async(categoryId) => {\n    // Count selected items for the current category.\n    setCount(categoryId);\n\n    // Update the count for the parent category.\n    let hasParent = document.getElementById(`checkboxcategory-${categoryId}`).getAttribute('data-parent');\n    if (hasParent) {\n        let parentCategoryId = hasParent.replace('#category-listing-content-', '');\n        setCount(parentCategoryId);\n    }\n\n    // Update the count for the children categories.\n    let children = document.querySelectorAll(`#category-listing-content-${categoryId} li[id^=\"listitem-category-\"]`);\n    children.forEach((child) => {\n        setCount(child.id.replace('listitem-category-', ''));\n    });\n};\n\n/**\n * Display the count of selected items in a category.\n *\n * @param {integer} categoryId\n *\n * @returns {void}\n */\nconst setCount = async(categoryId) => {\n    if (categoryId == 0) {\n        return;\n    }\n\n    let obj = {};\n    obj.categories = document.querySelectorAll(\n        `#category-listing-content-${categoryId} > li[id^=\"listitem-category-\"] > div > div > input[type=\"checkbox\"][id^=\"checkboxcategory-\"]:checked`\n    ).length;\n    obj.courses = document.querySelectorAll(\n        `#category-listing-content-${categoryId} > li[id^=\"listitem-course-\"] > div > div > input[type=\"checkbox\"][id^=\"checkboxcourse-\"]:checked`\n    ).length;\n\n    document.getElementById(\n        `selected-info-${categoryId}`).textContent = await getString('assignselectedinfo', 'local_notificationsagent', obj\n    );\n    document.getElementById(`selected-info-${categoryId}`).classList.remove(\"d-none\");\n};\n\n/**\n * Handles the click event on the Select Courses link.\n * Selects or unselects all courses in the category.\n *\n * @param {Event} event The event object.\n *\n * @returns {void}\n */\nconst onClickSelectCourses = async(event) => {\n    const selectItem = event.target.closest(selectors.selectAllId);\n    const categoryId = selectItem.getAttribute('data-category');\n    const isCategoryChecked = document.getElementById('checkboxcategory-' + categoryId + '').checked;\n    if (isCategoryChecked) {\n        return;\n    }\n\n    const checkboxes = document.querySelectorAll(\n        `#category-listing-content-${categoryId} > li[id^=\"listitem-course-\"] > div > div > input[type=\"checkbox\"][id^=\"checkboxcourse-\"]`\n    );\n    const isAllSelected = (selectItem.getAttribute('data-forceselected') == 'true') ? false : true;\n    selectItem.setAttribute('data-forceselected', isAllSelected);\n    selectItem.textContent = isAllSelected ?\n        await getString('assignunselectcourses', 'local_notificationsagent') :\n        await getString('assignselectcourses', 'local_notificationsagent');\n\n    checkboxes.forEach(function(checkbox) {\n        checkbox.checked = isAllSelected;\n    });\n\n    getCountBy(categoryId);\n};\n\n/**\n * Registers click event listeners for all Select Courses links.\n *\n * @returns {Promise<void>}\n */\nconst registerEventListeners = async() => {\n    const selectAllItems = document.querySelectorAll(selectors.selectAllId);\n    Array.from(selectAllItems).map((selectAllItem) => {\n        selectAllItem.addEventListener('click', onClickSelectCourses);\n    });\n};\n\n/**\n * Initialise the module.\n * @method init\n *\n */\nexport const init = () => {\n\n    /**\n * Types of rule type\n *\n * @type {{RULE_TYPE: boolean}}\n */\n    const RULE_TYPE = [\n        'rule',\n        'template'\n    ];\n\n    const ACTION = [\n        'SHOW_CONTEXT',\n        'SET_CONTEXT',\n    ];\n\n    const RULE_FORCED_TYPE = {\n        FORCED: 0,\n        NONFORCED: 1,\n    };\n\n    registerEventListeners();\n\n    var idtemplate;\n    $('#assignTemplateModal').on('show.bs.modal', function(event) {\n        resetDefaultCheckboxes('input[type=\"checkbox\"][id^=\"checkboxcategory-\"]');\n        resetDefaultCheckboxes('input[type=\"checkbox\"][id^=\"checkboxcourse-\"]');\n        resetDefaultSelectCourses();\n\n        var button = $(event.relatedTarget);\n        idtemplate = button.data('idtemplate');\n        var isRuleForced;\n        var htmlRuleForced;\n\n        let ruleCard = $('div[id=\"card-' + idtemplate + '\"]');\n        $('#assignTemplateModal #forced-content').empty();\n        if (ruleCard.data('type') === RULE_TYPE[0]) {\n            isRuleForced = ruleCard.data('forced');\n            getString('assignforced', 'local_notificationsagent').then(forcedRule => {\n                htmlRuleForced = '<div class=\"custom-control custom-checkbox mr-1\">';\n                htmlRuleForced += '<input id=\"forced\" type=\"checkbox\" class=\"custom-control-input\">';\n                htmlRuleForced += '<label class=\"custom-control-label\" for=\"forced\">' + forcedRule + '</label>';\n                htmlRuleForced += '</div>';\n                $('#assignTemplateModal #forced-content').append(htmlRuleForced);\n                if (!isRuleForced) {\n                    $('#assignTemplateModal #forced-content #forced').prop('checked', true);\n                }\n            });\n        }\n\n        var modal = $(this);\n        modal.find('.modal-title > span').text($('#card-' + idtemplate + ' .badge-type').text());\n        modal.find('.badge').text($('#card-' + idtemplate + ' .badge-type').text());\n        modal.find('.badge').attr('class', 'mr-2 ' + $('#card-' + idtemplate + ' .badge-type').attr('class'));\n\n        modal.find('.modal-body .name').text($('#card-' + idtemplate + ' .name').text());\n\n        /* Rellenar cursos asignados */\n        $.ajax({\n            type: \"POST\",\n            url: Url.relativeUrl('/local/notificationsagent/assignrule.php'),\n            data: {\n                ruleid: idtemplate,\n                action: ACTION[0]\n            },\n            success: function(data) {\n                data['category'].forEach((categoryid) => {\n                    let category = $('#assignTemplateModal .category-listing input#checkboxcategory-' + categoryid);\n                    if (category.length) {\n                        category.prop('checked', true);\n                        $('#category-listing-content-' + categoryid + ' input[type=\"checkbox\"]').prop(\"checked\", true);\n                        $('#category-listing-content-' + categoryid + ' input[type=\"checkbox\"]').prop(\"disabled\", true);\n                        $('#listitem-category-' + categoryid + ' input[type=\"checkbox\"]').prop(\"checked\", true);\n                    }\n                });\n\n                data['course'].forEach((courseid) => {\n                    let course = $('#assignTemplateModal .category-listing input#checkboxcourse-' + courseid);\n                    if (course.length) {\n                        course.prop('checked', true);\n                    }\n                });\n\n                // After displaying the selected info, display the count of selected items.\n                getCountAll();\n            },\n            error: function(XMLHttpRequest, textStatus, errorThrown) {\n                /* eslint-disable no-console */\n                console.log(\"Status: \" + textStatus);\n                console.log(errorThrown);\n                /* eslint-enable no-console */\n            },\n            dataType: 'json'\n        });\n    });\n    $('#assignTemplateModal').on('hide.bs.modal', function() {\n        $('#assignTemplateModal .custom-control-input').prop('checked', false);\n    });\n    $('#assignTemplateModal .collapse').on('show.bs.collapse', function() {\n        $(this).parents('.listitem-category').removeClass('collapsed');\n    });\n    $('#assignTemplateModal .collapse').on('hide.bs.collapse', function() {\n        $(this).parents('.listitem-category').addClass('collapsed');\n    });\n\n    /* checkbox */\n    $('#assignTemplateModal #course-category-select-all').on('click', function() {\n        var checkassign = $('#assignTemplateModal .category-listing .custom-control-input');\n        checkassign.prop('checked', $(this).prop('checked'));\n\n        // After checking Select all, display the count of selected items.\n        getCountAll();\n    });\n    $('#assignTemplateModal .category-listing').on('change', 'input[type=checkbox]', function() {\n        var checkssubcategoriescourses =\n            '#category-listing-content-' + $(this).attr(\"id\").replace('checkboxcategory-', '') + ' .custom-control-input';\n        $('#assignTemplateModal .category-listing ' + checkssubcategoriescourses).prop('checked', $(this).prop('checked'));\n        $('#assignTemplateModal .category-listing ' + checkssubcategoriescourses).prop('disabled', $(this).prop('checked'));\n\n        // After checking any category or course box, display the count of selected items of its category.\n        getCountBy(this.getAttribute(\"data-category\"));\n    });\n\n    $('#assignTemplateModal #saveassignTemplateModal').on('click', function() {\n        var data = {};\n        data['category'] = [];\n        data['course'] = [];\n        var allCategories = [];\n\n        let forced = RULE_FORCED_TYPE.NONFORCED;\n        if ($('#assignTemplateModal #forced').prop('checked')) {\n            forced = RULE_FORCED_TYPE.FORCED;\n        }\n\n        let mainCategories = $('#assignTemplateModal #category-listing-content-0 > li[id^=\"listitem-category-\"]')\n            .has('input[id^=\"checkboxcategory-\"]:checked');\n\n        mainCategories.each(function() {\n            let items = $('#' + this.id + ' input[id^=\"checkboxcategory-\"]:checked').map(function() {\n                let id = $(this).attr('id').replace('checkboxcategory-', '');\n                let parent = $(this).data('parent').replace('#category-listing-content-', '');\n\n                if ($.inArray(id, allCategories) === -1) {\n                    allCategories.push(id);\n                }\n\n                return { id: id, parent: parent };\n            }).get();\n\n            var parents = $.map(items, function(item) {\n                return item.id;\n            });\n\n            $.grep(items, function(item) {\n                if ($.inArray(item.parent, parents) === -1) {\n                    data['category'].push(item.id);\n                }\n            });\n        });\n\n        let courses = $('#assignTemplateModal .category-listing input[id^=\"checkboxcourse-\"]:checked').map(function() {\n            let id = $(this).attr('id').replace('checkboxcourse-', '');\n            let category = $(this).data('parent').replace('#category-listing-content-', '');\n\n            return { id: id, category: category };\n        }).get();\n\n        if ($.isEmptyObject(data['category'])) {\n            $.each(courses, function(index, course) {\n                data['course'].push(course.id);\n            });\n        } else {\n            $.grep(courses, function(course) {\n                if ($.inArray(course.category, allCategories) === -1) {\n                    data['course'].push(course.id);\n                }\n            });\n        }\n\n        $.ajax({\n            type: \"POST\",\n            url: Url.relativeUrl('/local/notificationsagent/assignrule.php'),\n            data: {\n                ruleid: idtemplate,\n                category: data['category'],\n                course: data['course'],\n                forced: forced,\n                action: ACTION[1]\n            },\n            success: function() {\n                window.location.reload();\n            },\n            error: function(XMLHttpRequest, textStatus, errorThrown) {\n                /* eslint-disable no-console */\n                console.log(\"Status: \" + textStatus);\n                console.log(errorThrown);\n                /* eslint-enable no-console */\n            },\n            dataType: 'json'\n        });\n\n    });\n\n    /**\n     * Reset default checkboxes.\n     * @param {string} selector\n     */\n    const resetDefaultCheckboxes = (selector) => {\n        document.querySelectorAll(selector).forEach(checkbox => {\n            checkbox.checked = false;\n            checkbox.disabled = false;\n        });\n    };\n\n    /**\n     * Resets all Select Courses links to their default state.\n     *\n     * @return {Promise<void>}\n     */\n    const resetDefaultSelectCourses = async() => {\n        const selectItems = document.querySelectorAll(selectors.selectAllId);\n\n        Promise.all(Array.from(selectItems).map(async(selectItem) => {\n            selectItem.setAttribute('data-forceselected', 'false');\n            selectItem.textContent = await getString('assignselectcourses', 'local_notificationsagent');\n        }));\n    };\n};\n"],"names":["selectors","getCountAll","async","categories","document","querySelectorAll","Array","from","map","category","getCountBy","id","replace","setCount","categoryId","hasParent","getElementById","getAttribute","parentCategoryId","forEach","child","obj","length","courses","textContent","classList","remove","onClickSelectCourses","selectItem","event","target","closest","checked","checkboxes","isAllSelected","setAttribute","checkbox","RULE_TYPE","ACTION","RULE_FORCED_TYPE","idtemplate","selectAllItems","selectAllItem","addEventListener","registerEventListeners","on","resetDefaultCheckboxes","resetDefaultSelectCourses","isRuleForced","htmlRuleForced","button","relatedTarget","data","ruleCard","empty","then","forcedRule","append","prop","modal","this","find","text","attr","ajax","type","url","Url","relativeUrl","ruleid","action","success","categoryid","courseid","course","error","XMLHttpRequest","textStatus","errorThrown","console","log","dataType","parents","removeClass","addClass","checkssubcategoriescourses","allCategories","forced","has","each","items","parent","$","inArray","push","get","item","grep","isEmptyObject","index","window","location","reload","selector","disabled","selectItems","Promise","all"],"mappings":"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"}
