{"version":3,"file":"update_status.min.js","sources":["../../src/rule/update_status.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n// Project implemented by the \\\"Recovery, Transformation and Resilience Plan.\n// Funded by the European Union - Next GenerationEU\\\".\n//\n// Produced by the UNIMOODLE University Group: Universities of\n// Valladolid, Complutense de Madrid, UPV/EHU, León, Salamanca,\n// Illes Balears, Valencia, Rey Juan Carlos, La Laguna, Zaragoza, Málaga,\n// Córdoba, Extremadura, Vigo, Las Palmas de Gran Canaria y Burgos.\n\n/**\n * Version details\n *\n * @copyright  2023 Proyecto UNIMOODLE\n * @author     UNIMOODLE Group (Coordinator) <direccion.area.estrategia.digital@uva.es>\n * @author     ISYC <soporte@isyc.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString} from 'core/str';\nimport Notification from 'core/notification';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Templates from 'core/templates';\nimport {updateRuleStatus} from 'local_notificationsagent/rule/repository';\nimport $ from 'jquery';\n/**\n * Types of rule states.\n *\n * @type {{STATUS_TYPE: boolean}}\n */\nconst STATUS_TYPE = {\n    RESUMED: 0,\n    PAUSED: 1,\n};\n\n/**\n * Selectors for the Update Status Button.\n *\n * @property {string} updateStatusRuleId The element ID of the Update Status Rule button.\n */\nconst selectors = {\n    updateStatusRuleId: '[id^=\"status-rule-\"]:not(.disabled)',\n    updateStatusRuleDataState: 'data-status',\n};\n\n/**\n * Initialises the Update Status Rule module.\n *\n * @method init\n */\nexport const init = async() => {\n    let updateStatusItems = document.querySelectorAll(selectors.updateStatusRuleId);\n\n    updateStatusItems.forEach((updateStatusItem) => {\n        updateStatusItem.addEventListener('click', async function() {\n            await showModal(updateStatusItem);\n        });\n    });\n};\n\n/**\n *\n * Shows the update status modal for a given rule.\n *\n * @param {HTMLElement} updateStatusItem\n * @returns {Promise<void>}\n */\nconst showModal = async(updateStatusItem) => {\n    let ruleObj = {};\n\n    ruleObj.id = updateStatusItem.dataset.ruleid;\n    ruleObj.title = document.querySelector('#card-' + ruleObj.id + ' .name').textContent;\n    ruleObj.status = updateStatusItem.dataset.status == STATUS_TYPE.RESUMED ? STATUS_TYPE.RESUMED : STATUS_TYPE.PAUSED;\n\n    if (!ruleObj.status) {\n        ruleObj.name = await getString('status_pausetitle', 'local_notificationsagent', ruleObj);\n    } else {\n        ruleObj.name = await getString('status_activatetitle', 'local_notificationsagent', ruleObj);\n    }\n\n    ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        title: ruleObj.name,\n        body: Templates.render('local_notificationsagent/modal/update_status', {\n            rule: ruleObj,\n        }),\n    }).then(function(modal) {\n        let isPaused = !ruleObj.status ? STATUS_TYPE.PAUSED : STATUS_TYPE.RESUMED;\n        let updateStatusBtnText = isPaused ?\n            getString('statuspause', 'local_notificationsagent') : getString('statusactivate', 'local_notificationsagent');\n\n        modal.setSaveButtonText(updateStatusBtnText);\n\n        // Handle save event.\n        modal.getRoot().on(ModalEvents.save, function() {\n            setRuleStatus(ruleObj.id, isPaused);\n        });\n\n        // Handle hidden event.\n        modal.getRoot().on(ModalEvents.hidden, function() {\n            // Destroy when hidden.\n            modal.destroy();\n        });\n\n        modal.show();\n\n        return true;\n    });\n};\n\n/**\n * Changes the status for a given rule.\n *\n * @param {integer} id Rule id.\n * @param {boolean} status Rule status type.\n * @returns {Promise<void>}\n */\nconst setRuleStatus = async(id, status) => {\n    try {\n        let response = await updateRuleStatus(id, status);\n\n        if ($.isEmptyObject(response['warnings'])) {\n            let updateStatusItem = document.querySelector('a#status-rule-' + id);\n            let updateStatusItemIcon = document.createElement('i');\n            let updateStatusItemText = '';\n            let updateStatusItemMessage = '';\n\n            let cardBadge = document.querySelector('#card-' + id + ' .badge-status');\n\n            if (!status) {\n                updateStatusItemText = await getString('statuspause', 'local_notificationsagent');\n                updateStatusItem.setAttribute(selectors.updateStatusRuleDataState, STATUS_TYPE.RESUMED);\n                updateStatusItemIcon.className = 'fa fa-pause mr-2';\n                updateStatusItemMessage = await getString('status_acceptactivated', 'local_notificationsagent');\n\n                if (!cardBadge.classList.contains('badge-required')) {\n                    cardBadge.classList.remove('badge-paused');\n                    cardBadge.classList.add('badge-active');\n                    cardBadge.querySelector('span').textContent = await getString('status_active', 'local_notificationsagent');\n                }\n            } else {\n                updateStatusItemText = await getString('statusactivate', 'local_notificationsagent');\n                updateStatusItem.setAttribute(selectors.updateStatusRuleDataState, STATUS_TYPE.PAUSED);\n                updateStatusItemIcon.className = 'fa fa-play mr-2';\n                updateStatusItemMessage = await getString('status_acceptpaused', 'local_notificationsagent');\n\n                if (!cardBadge.classList.contains('badge-required')) {\n                    cardBadge.classList.remove('badge-active');\n                    cardBadge.classList.add('badge-paused');\n                    cardBadge.querySelector('span').textContent = await getString('status_paused', 'local_notificationsagent');\n                }\n            }\n\n            updateStatusItem.innerHTML = '';\n            updateStatusItem.appendChild(updateStatusItemIcon);\n            updateStatusItem.appendChild(document.createTextNode(updateStatusItemText));\n\n            Notification.addNotification({\n                message: updateStatusItemMessage,\n                type: 'info'\n            });\n        } else {\n            Notification.addNotification({\n                message: response['warnings'][0].message,\n                type: 'error'\n            });\n        }\n    } catch (exception) {\n        Notification.exception(exception);\n    }\n};\n"],"names":["STATUS_TYPE","selectors","async","document","querySelectorAll","forEach","updateStatusItem","addEventListener","showModal","ruleObj","id","dataset","ruleid","title","querySelector","textContent","status","name","create","type","ModalFactory","types","SAVE_CANCEL","body","Templates","render","rule","then","modal","isPaused","updateStatusBtnText","setSaveButtonText","getRoot","on","ModalEvents","save","setRuleStatus","hidden","destroy","show","response","$","isEmptyObject","updateStatusItemIcon","createElement","updateStatusItemText","updateStatusItemMessage","cardBadge","setAttribute","className","classList","contains","remove","add","innerHTML","appendChild","createTextNode","addNotification","message","exception"],"mappings":";;;;;;;;4UA2CMA,oBACO,EADPA,mBAEM,EAQNC,6BACkB,sCADlBA,oCAEyB,4BAQXC,UACQC,SAASC,iBAAiBH,8BAEhCI,SAASC,mBACvBA,iBAAiBC,iBAAiB,SAASL,uBACjCM,UAAUF,+BAYtBE,UAAYN,MAAAA,uBACVO,QAAU,GAEdA,QAAQC,GAAKJ,iBAAiBK,QAAQC,OACtCH,QAAQI,MAAQV,SAASW,cAAc,SAAWL,QAAQC,GAAK,UAAUK,YACzEN,QAAQO,OAASV,iBAAiBK,QAAQK,QAAUhB,oBAAsBA,oBAAsBA,mBAE3FS,QAAQO,OAGTP,QAAQQ,WAAa,mBAAU,uBAAwB,2BAA4BR,SAFnFA,QAAQQ,WAAa,mBAAU,oBAAqB,2BAA4BR,gCAKvES,OAAO,CAChBC,KAAMC,uBAAaC,MAAMC,YACzBT,MAAOJ,QAAQQ,KACfM,KAAMC,mBAAUC,OAAO,+CAAgD,CACnEC,KAAMjB,YAEXkB,MAAK,SAASC,WACTC,SAAYpB,QAAQO,OAA8BhB,oBAArBA,mBAC7B8B,oBAAsBD,UACtB,mBAAU,cAAe,6BAA8B,mBAAU,iBAAkB,mCAEvFD,MAAMG,kBAAkBD,qBAGxBF,MAAMI,UAAUC,GAAGC,sBAAYC,MAAM,WACjCC,cAAc3B,QAAQC,GAAImB,aAI9BD,MAAMI,UAAUC,GAAGC,sBAAYG,QAAQ,WAEnCT,MAAMU,aAGVV,MAAMW,QAEC,MAWTH,cAAgBlC,MAAMQ,GAAIM,kBAEpBwB,eAAiB,gCAAiB9B,GAAIM,WAEtCyB,gBAAEC,cAAcF,SAAQ,UAAe,KACnClC,iBAAmBH,SAASW,cAAc,iBAAmBJ,IAC7DiC,qBAAuBxC,SAASyC,cAAc,KAC9CC,qBAAuB,GACvBC,wBAA0B,GAE1BC,UAAY5C,SAASW,cAAc,SAAWJ,GAAK,kBAElDM,QAYD6B,2BAA6B,mBAAU,iBAAkB,4BACzDvC,iBAAiB0C,aAAa/C,oCAAqCD,oBACnE2C,qBAAqBM,UAAY,kBACjCH,8BAAgC,mBAAU,sBAAuB,4BAE5DC,UAAUG,UAAUC,SAAS,oBAC9BJ,UAAUG,UAAUE,OAAO,gBAC3BL,UAAUG,UAAUG,IAAI,gBACxBN,UAAUjC,cAAc,QAAQC,kBAAoB,mBAAU,gBAAiB,+BAnBnF8B,2BAA6B,mBAAU,cAAe,4BACtDvC,iBAAiB0C,aAAa/C,oCAAqCD,qBACnE2C,qBAAqBM,UAAY,mBACjCH,8BAAgC,mBAAU,yBAA0B,4BAE/DC,UAAUG,UAAUC,SAAS,oBAC9BJ,UAAUG,UAAUE,OAAO,gBAC3BL,UAAUG,UAAUG,IAAI,gBACxBN,UAAUjC,cAAc,QAAQC,kBAAoB,mBAAU,gBAAiB,8BAevFT,iBAAiBgD,UAAY,GAC7BhD,iBAAiBiD,YAAYZ,sBAC7BrC,iBAAiBiD,YAAYpD,SAASqD,eAAeX,6CAExCY,gBAAgB,CACzBC,QAASZ,wBACT3B,KAAM,oCAGGsC,gBAAgB,CACzBC,QAASlB,SAAQ,SAAa,GAAGkB,QACjCvC,KAAM,UAGhB,MAAOwC,iCACQA,UAAUA"}