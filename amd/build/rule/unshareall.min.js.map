{"version":3,"file":"unshareall.min.js","sources":["../../src/rule/unshareall.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n// Project implemented by the \\\"Recovery, Transformation and Resilience Plan.\n// Funded by the European Union - Next GenerationEU\\\".\n//\n// Produced by the UNIMOODLE University Group: Universities of\n// Valladolid, Complutense de Madrid, UPV/EHU, León, Salamanca,\n// Illes Balears, Valencia, Rey Juan Carlos, La Laguna, Zaragoza, Málaga,\n// Córdoba, Extremadura, Vigo, Las Palmas de Gran Canaria y Burgos.\n\n/**\n * Version details\n *\n * @copyright  2023 Proyecto UNIMOODLE\n * @author     UNIMOODLE Group (Coordinator) <direccion.area.estrategia.digital@uva.es>\n * @author     ISYC <soporte@isyc.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString} from 'core/str';\nimport Notification from 'core/notification';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Templates from 'core/templates';\nimport {unshareAllRule} from 'local_notificationsagent/rule/repository';\nimport $ from 'jquery';\n/**\n * Selectors for the Unshare All Button.\n *\n * @property {string} unshareAllRuleId The element ID of the Unshare Rule button.\n */\nconst selectors = {\n    unshareAllRuleId: '[id^=\"unshare-all-rule-\"]:not(.disabled)',\n};\n\n/**\n * Initialises the Unshare All Rule module.\n *\n * @method init\n */\nexport const init = async() => {\n    let ununshareAllItems = document.querySelectorAll(selectors.unshareAllRuleId);\n\n    ununshareAllItems.forEach((unshareAllItem) => {\n        unshareAllItem.addEventListener('click', async function() {\n            await showModal(unshareAllItem);\n        });\n    });\n};\n\n/**\n *\n * Shows the unshare all modal for a given rule.\n *\n * @param {HTMLElement} unshareAllItem\n * @returns {Promise<void>}\n */\nconst showModal = async(unshareAllItem) => {\n    let ruleObj = {};\n\n    ruleObj.id = unshareAllItem.dataset.ruleid;\n    ruleObj.title = document.querySelector('#card-' + ruleObj.id + ' .name').textContent;\n    ruleObj.name = await getString('unsharealltitle', 'local_notificationsagent', ruleObj);\n\n    ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        title: ruleObj.name,\n        body: Templates.render('local_notificationsagent/modal/unshareall', {\n            rule: ruleObj,\n        }),\n    }).then(function(modal) {\n        modal.setSaveButtonText(getString('editrule_unshareallrule', 'local_notificationsagent'));\n\n        // Handle save event.\n        modal.getRoot().on(ModalEvents.save, function() {\n            setUnshareAllRule(ruleObj.id);\n        });\n\n        // Handle hidden event.\n        modal.getRoot().on(ModalEvents.hidden, function() {\n            // Destroy when hidden.\n            modal.destroy();\n        });\n\n        modal.show();\n\n        return true;\n    });\n};\n\n/**\n * Rejects the sharing for a given rule.\n *\n * @param {integer} id Rule id.\n * @returns {Promise<void>}\n */\nconst setUnshareAllRule = async(id) => {\n    try {\n       let response = await unshareAllRule(id);\n\n        if ($.isEmptyObject(response['warnings'])) {\n            getString('sharereject', 'local_notificationsagent').then(ruleUnshared => {\n                document.querySelector('#card-' + id).remove();\n\n                Notification.addNotification({\n                    message: ruleUnshared,\n                    type: 'info'\n                });\n            });\n        } else {\n            Notification.addNotification({\n                message: response['warnings'][0].message,\n                type: 'error'\n            });\n        }\n    } catch (exception) {\n        Notification.exception(exception);\n    }\n};\n"],"names":["selectors","async","document","querySelectorAll","forEach","unshareAllItem","addEventListener","showModal","ruleObj","id","dataset","ruleid","title","querySelector","textContent","name","create","type","ModalFactory","types","SAVE_CANCEL","body","Templates","render","rule","then","modal","setSaveButtonText","getRoot","on","ModalEvents","save","setUnshareAllRule","hidden","destroy","show","response","$","isEmptyObject","ruleUnshared","remove","addNotification","message","exception"],"mappings":";;;;;;;;4UA2CMA,2BACgB,yDAQFC,UACQC,SAASC,iBAAiBH,4BAEhCI,SAASC,iBACvBA,eAAeC,iBAAiB,SAASL,uBAC/BM,UAAUF,6BAYtBE,UAAYN,MAAAA,qBACVO,QAAU,GAEdA,QAAQC,GAAKJ,eAAeK,QAAQC,OACpCH,QAAQI,MAAQV,SAASW,cAAc,SAAWL,QAAQC,GAAK,UAAUK,YACzEN,QAAQO,WAAa,mBAAU,kBAAmB,2BAA4BP,gCAEjEQ,OAAO,CAChBC,KAAMC,uBAAaC,MAAMC,YACzBR,MAAOJ,QAAQO,KACfM,KAAMC,mBAAUC,OAAO,4CAA6C,CAChEC,KAAMhB,YAEXiB,MAAK,SAASC,cACbA,MAAMC,mBAAkB,mBAAU,0BAA2B,6BAG7DD,MAAME,UAAUC,GAAGC,sBAAYC,MAAM,WACjCC,kBAAkBxB,QAAQC,OAI9BiB,MAAME,UAAUC,GAAGC,sBAAYG,QAAQ,WAEnCP,MAAMQ,aAGVR,MAAMS,QAEC,MAUTH,kBAAoB/B,MAAAA,aAEfmC,eAAiB,8BAAe3B,IAE/B4B,gBAAEC,cAAcF,SAAQ,8BACd,cAAe,4BAA4BX,MAAKc,eACtDrC,SAASW,cAAc,SAAWJ,IAAI+B,+BAEzBC,gBAAgB,CACzBC,QAASH,aACTtB,KAAM,kCAIDwB,gBAAgB,CACzBC,QAASN,SAAQ,SAAa,GAAGM,QACjCzB,KAAM,UAGhB,MAAO0B,iCACQA,UAAUA"}