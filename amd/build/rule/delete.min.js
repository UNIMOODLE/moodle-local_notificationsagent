define("local_notificationsagent/rule/delete",["exports","core/str","core/notification","core/modal_factory","core/modal_events","core/templates","local_notificationsagent/rule/repository","jquery"],(function(_exports,_str,_notification,_modal_factory,_modal_events,_templates,_repository,_jquery){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * @module    local_notificationsagent/rule/delete
   * @copyright 2023 ISYC <soporte@isyc.com>
   * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0,_notification=_interopRequireDefault(_notification),_modal_factory=_interopRequireDefault(_modal_factory),_modal_events=_interopRequireDefault(_modal_events),_templates=_interopRequireDefault(_templates),_jquery=_interopRequireDefault(_jquery);const selectors_deleteRuleId='[id^="delete-rule-"]:not(.disabled)';_exports.init=async()=>{document.querySelectorAll(selectors_deleteRuleId).forEach((deleteItem=>{deleteItem.addEventListener("click",(async function(){await showModal(deleteItem)}))}))};const showModal=async deleteItem=>{let ruleObj={};ruleObj.id=deleteItem.dataset.ruleid,ruleObj.type=deleteItem.dataset.type,ruleObj.title=document.querySelector("#card-"+ruleObj.id+" .name").textContent,hasRuleContext(deleteItem).then((hasContext=>{ruleObj.hascontext=hasContext,_modal_factory.default.create({type:_modal_factory.default.types.SAVE_CANCEL,title:(0,_str.get_string)("deletetitle","local_notificationsagent",ruleObj),body:_templates.default.render("local_notificationsagent/modal/delete",{rule:ruleObj})}).then((function(modal){return modal.setSaveButtonText((0,_str.get_string)("delete")),modal.getRoot().on(_modal_events.default.save,(function(){setDeleteRule(ruleObj.id)})),modal.getRoot().on(_modal_events.default.hidden,(function(){modal.destroy()})),modal.show(),!0})).catch(_notification.default.exception)}))},hasRuleContext=async deleteItem=>{let id=deleteItem.dataset.ruleid,hasContext=!1;try{let response=await(0,_repository.checkRuleContext)(id);_jquery.default.isEmptyObject(response.warnings)?hasContext=response.hascontext:_notification.default.addNotification({message:response.warnings[0].message,type:"error"})}catch(exception){_notification.default.exception(exception)}return hasContext},setDeleteRule=async id=>{try{let response=await(0,_repository.deleteRule)(id);_jquery.default.isEmptyObject(response.warnings)?(0,_str.get_string)("deleteaccept","local_notificationsagent").then((ruleDeleted=>{document.querySelector("#card-"+id).remove(),_notification.default.addNotification({message:ruleDeleted,type:"info"})})):_notification.default.addNotification({message:response.warnings[0].message,type:"error"})}catch(exception){_notification.default.exception(exception)}}}));

//# sourceMappingURL=delete.min.js.map